{"version":3,"sources":["tests/tests.js"],"names":[],"mappings":"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","file":"tests.js","sourcesContent":["//\n// A very minimal testsuite for the PyPy.js shell code.\n// We should do something a lot nicer than this...\n//\nif (typeof pypyjs === 'undefined') {\n  if (typeof require !== 'undefined') {\n    pypyjs = require('../pypyjs.js');\n  } else if (typeof loadRelativeToScript !== 'undefined') {\n    loadRelativeToScript('../pypyjs.js');\n  } else if (typeof load !== 'undefined') {\n    load('pypyjs.js');\n  }\n}\n\nlet log;\nif (typeof console !== 'undefined') {\n  log = console.log.bind(console);\n} else {\n  log = print;\n}\n\nconst vm = new pypyjs();\n\nconst pypyjsTestResult = vm.ready();\n\n// First, check that python-level errors will actually fail the tests.\npypyjsTestResult\n.then(() => vm.exec('raise ValueError(42)'))\n.then(() => { throw new Error('Python exception did not trigger js Error'); },\n(err) => {\n  if (!(err instanceof pypyjs.Error)) {\n    throw new Error('Python exception didn\\'t trigger vm.Error instance: ' + err);\n  }\n  if (err.name !== 'ValueError' || err.message !== '42') {\n    throw new Error('Python exception didn\\'t trigger correct error info: ' + err);\n  }\n})\n\n// Check that the basic set-exec-get cycle works correctly.\n.then(() => vm.set('x', 7))\n.then(() => vm.exec('x = x * 2'))\n.then(() => vm.get('x'))\n.then((x) => {\n  if (x !== 14) {\n    throw new Error('set-exec-get cycle failed');\n  }\n})\n\n// Check that eval() works correctly.\n.then(() => vm.eval('x + 1'))\n.then((x) => {\n  if (x !== 15) {\n    throw new Error('eval failed');\n  }\n})\n\n// Check that we can read non-existent names and get 'undefined'\n.then(() => vm.get('nonExistentName'))\n.then((x) => {\n  if (typeof x !== 'undefined') {\n    throw new Error('name should have been undefined');\n  }\n})\n// - for globals()\n.then(() => vm.get('nonExistentName', true))\n.then((x) => {\n  if (typeof x !== 'undefined') {\n    throw new Error('name should have been undefined');\n  }\n})\n\n// Check that get() propagates errors other than involved in getting the variable.\n.then(() => {\n  return vm.get('__name__ + 5')\n  .then(\n    () => { throw new Error('should have thrown an error'); },\n    (exc) => {\n      if (typeof exc === 'undefined') {\n        throw new Error('expected to receive an exception');\n      } else if (exc.name !== 'TypeError') {\n        throw new Error('expected to receive a TypeError');\n      }\n    }\n  );\n})\n\n// Check that we execute in correctly-__name__'d python scope.\n.then(() => vm.exec('assert __name__ == \\'__main__\\', __name__'))\n\n// Check that sys.platform tells us something sensible.\n.then(() => vm.exec('import sys; assert sys.platform == \\'js\\''))\n\n// Check that multi-line exec will work correctly.\n.then(() => vm.exec('x = 2\\ny = x * 3'))\n.then(() => vm.get('y'))\n.then((y) => {\n  if (y !== 6) {\n    throw new Error('multi-line exec didn\\'t work');\n  }\n})\n\n// Check that multi-import statements will work correctly.\n.then(() => vm.exec('import os\\nimport time\\nimport sys\\nx=time.time()'))\n\n// Check that multi-import statements will work correctly.\n.then(() => vm.exec('import os\\nimport time\\nimport sys\\nx=time.time()'))\n.then(() => vm.get('x'))\n.then((x) => {\n  if (!x) {\n    throw new Error('multi-line import didn\\'t work');\n  }\n})\n\n// Check that you can create additional VMs using `new`\n.then(() => {\n  const vm2 = new pypyjs();\n  return vm2.exec('x = 17')\n        .then(() => vm2.get('x'))\n        .then((x) => {\n          if (x !== 17) {\n            throw new Error('newly-created VM didn\\'t work right');\n          }\n        })\n        .then(() => vm2.get('y'))\n        .then((y) => {\n          if (typeof y !== 'undefined') {\n            throw new Error('name should have been undefined in new VM');\n          }\n        });\n})\n\n// Test use of top-level methods on default vm instance\n.then(() => {\n  return pypyjs.eval('3 + 4')\n        .then((x) => {\n          if (x !== 7) {\n            throw new Error('top-level method method didn\\'t work right');\n          }\n        });\n})\n\n// Report success or failure at the end of the chain.\n.then(() => {\n  log('TESTS PASSED!');\n},\n(err) => {\n  log('TESTS FAILED!');\n  log(err);\n  throw err;\n});\n"]}